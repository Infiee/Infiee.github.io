{"pages":[],"posts":[{"title":"angular实现checkbox单选和取消","text":"template: 123456789101112131415&lt;form novalidate&gt; 选择名字:{{chooseArr}} &lt;ion-list&gt; &lt;ion-checkbox ng-model=&quot;checkItem&quot; ng-repeat=&quot;item in checkGroup&quot; ng-click=&quot;chooseItem(item,checkItem)&quot;&gt; {{item}} &lt;/ion-checkbox&gt; &lt;/ion-list&gt; &lt;a class=&quot;common-button&quot; ng-click=&quot;getCheckBox()&quot; ng-disabled=&quot;!checkStatus&quot; ng-class=&quot;{true:&apos;btn-disable&apos;,false:&apos;btn-enable&apos;}[!checkStatus]&quot; style=&quot;margin-top:15px;&quot;&gt; 点击 &lt;/a&gt;&lt;/form&gt; controller: 1234567891011121314151617181920212223242526$scope.checkGroup = [&apos;中国&apos;,&apos;印度&apos;,&apos;澳大利亚&apos;,&apos;马来西亚&apos;];$scope.chooseArr = [];$scope.checkStatus = false;var str=&apos;&apos;;$scope.chooseItem=function(item,checkItem){ if (checkItem == true) { //选中 str = str + item + &apos;,&apos;; $scope.checkStatus = true; } else { //取消选中 str = str.replace(item + &apos;,&apos;,&apos;&apos;); } $scope.chooseArr=(str.substr(0,str.length-1)).split(&apos;,&apos;); //如果选中小于1或数组第一个为空则禁用按钮 if($scope.chooseArr.length&lt;1||$scope.chooseArr[0]==&apos;&apos;){ console.log(&apos;按钮已被禁用&apos;); $scope.checkStatus = false; }};$scope.getCheckBox = function () { // 选择checkbox的时候已经禁用按钮,故这里不需要再次判断 console.log($scope.chooseArr);};","link":"/2016/04/30/angular实现checkbox单选和取消/"},{"title":"codova插件列表","text":"1、QQ分享 描述：QQ分享插件 2、weChat分享 描述：微信分享插件 3、Custom-URL-scheme 描述：点击链接（协议），打开存在该协议的app 123456//写在app端，controller外边：function handleOpenURL(url) { console.log(&quot;received url: &quot; + url);}//写在服务器端：&lt;a href=&quot;mycoolapp://&quot;&gt;Open my app&lt;/a&gt; 4、inappbrowser 描述：调用app自带浏览器—可返回 5、App版本更新 描述：App版本更新 6、toast 描述：弹出信息 7、更多插件 描述：可以常用插件在NgCordova的官网去查找","link":"/2016/06/02/codova插件列表/"},{"title":"angular中filter使用和缓存jsonp数据","text":"angular缓存jsonp数据: 参考自：https://www.chedanji.com/angularjs-cache-for-jsonp/ 12345678910111213141516angular.module(&apos;app&apos;,[]).factory(&quot;myCache&quot;, function($cacheFactory){ return $cacheFactory(&quot;me&quot;);}).controller(&quot;AppCtrl&quot;, function($http, myCache){ var app = this; app.load = function(){ $http.get(&quot;apiurl&quot;,{cache:myCache}) .success(function(data){ app.data = data; }) } app.clearCache = function(){ myCache.remove(&quot;apiurl&quot;); }}) $filter使用方法: 1$filter(&apos;filter&apos;)(objData, { $: n });","link":"/2016/04/30/angular中filter使用和缓存jsonp数据/"},{"title":"cordova文件上传/下载","text":"1、file 文件系统 文件系统相关资料参考apihttps://github.com/apache/cordova-plugin-file cordova.file.applicationDirectory app程序目录 cordova.file.applicationStorageDirectory app程序沙盒目录 cordova.file.cacheDirectory 缓存目录 cordova.file.tempDirectory临时文件目录 2、file Transfer 文件传输（下载/上传） 下载文件，命名本地相同路径文件名，本地文件可以被覆盖 ionic下载文件，切换视图，不会打断文件后台下载 12345678910111213141516171819document.addEventListener(&apos;deviceready&apos;, function () { var url = &quot;http://cdn.wall-pix.net/albums/art-space/00030109.jpg&quot;; var targetPath = cordova.file.documentsDirectory + &quot;testImage.png&quot;; var trustHosts = true; var options = {}; $cordovaFileTransfer.download(url, targetPath, options, trustHosts) .then(function(result) { // Success! }, function(err) { // Error }, function (progress) { $timeout(function () { $scope.downloadProgress = (progress.loaded / progress.total) * 100; }); }); }, false); 3、fileOpener2 文件打开（可以打开apk、zip文件等） 以上三种插件组合，可以实现文件下载、上传（图片上传等）、android自动更新等功能","link":"/2016/06/02/cordova文件上传-下载/"},{"title":"express简单添加restful接口数据","text":"准备工作 1.安装express generator到全局,然后下载初始化项目到本地 123456789npm install express-generator -gexpress myappcd myappnpm installDEBUG=myapp:* npm start 2.myapp目录下添加model文件夹，并新建comments.js文件,代码如下： 123456exports.comments = [ { author : &apos;小明&apos;, text : &quot;Nothing is impossible, the word itself says &apos;I&apos;m possible&apos;!&quot;}, { author : &apos;小强&apos;, text : &quot;You may not realize it when it happens, but a kick in the teeth may be the best thing in the world for you&quot;}, { author : &apos;小兵&apos;, text : &quot;Even the greatest was once a beginner. Don&apos;t be afraid to take that first step.&quot;}, { author : &apos;拉登&apos;, text : &quot;You are afraid to die, and you&apos;re afraid to live. What a way to exist.&quot;}]; 3.routes目录下添加comment.js（只是测试，名字你高兴就好）,代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859/* * GET comments listing. */var comments = require(&apos;../model/comments&apos;).comments;exports.list = function(req, res){ res.json(comments);};exports.get = function(req, res){ if(comments.length &lt;= req.params.id || req.params.id &lt; 0) { res.statusCode = 404; return res.send(&apos;Error 404: No comment found&apos;); } var q = comments[req.params.id]; res.json(q);};exports.delete = function(req, res){ if(comments.length &lt;= req.params.id) { res.statusCode = 404; return res.send(&apos;Error 404: No comment found&apos;); } comments.splice(req.params.id, 1); res.json(true);};exports.update = function(req, res){ res.setHeader(&apos;Content-Type&apos;, &apos;application/json;charset=utf-8&apos;); for(var i=0;i&lt;comments.length;i++){ if(comments[i].author==req.body.author){ comments[i] = req.body; res.send({status:&quot;success&quot;, message:&quot;update comment success&quot;}); console.log(comments); } }};exports.add = function(req, res){ if(!req.body.hasOwnProperty(&apos;author&apos;) || !req.body.hasOwnProperty(&apos;text&apos;)) { res.statusCode = 400; return res.send(&apos;Error 400: Post syntax incorrect.&apos;); } var newComment = { author : req.body.author, text : req.body.text }; comments.push(newComment); res.json(true);}; 4.修改app.js 添加 123var comment = require(&apos;./routes/comment&apos;);app.use(&apos;/comments&apos;,comment.list ); 5.重新启动node服务 ctrl+c停止命令并重启服务DEBUG=myapp:* npm start 访问 http://localhost:3000/comments 就可以访问到模拟的接口数据","link":"/2016/06/12/express简单添加restful接口/"},{"title":"hexo搭建部署及简单用法","text":"欢迎来到 Hexo! 它一个静态博客，相关API可以点击 documentation 查询. 快速开始，搭建本地hexo1、安装Node.js，Node.js下载. 2、安装Git,Git客户端.记得勾选添加环境变量的选项,不然就自己配置环境变量. 3、安装hexo 1234567891011121314151617181920212223242526272829303132npm install hexo-cli -gnpm install hexo --save# 如果命令无法运行，可以尝试更换taobao的npm源npm install -g cnpm --registry=https://registry.npm.taobao.org# 创建Hexo文件夹# 安装完成后，根据自己喜好建立目录（如E:\\kuaipan\\GitHub\\hexo）hexo init# 安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install# 新建完成后，指定文件夹的目录如下.├── _config.yml├── package.json├── scaffolds├── scripts├── source| ├── _drafts| └── _posts└── themes# 安装Hexo插件,部署到Gitnpm install hexo-deployer-git --save# 开启hexo服务hexo server 4、部署静态网页到GitHub 12345678910111213141516171819202122# 登录GitHub，注册自定义用户名如apple# 在主页右下角创建New repository，name必须和用户名一致如apple.github.io# (参考资料：https://pages.github.com/)# 打开Github客户端，clone在Github上新建的资源库# 配置本地hexo博客,_config.yml#（具体配置参考：https://github.com/Infiee/infiee.github.io/tree/SourceCode）url: http://infiee.github.io/root: /deploy: type: git repo: https://github.com/Infiee/infiee.github.io branch: master# 配置完成后,发布静态博客到github仓库hexo cleanhexo ghexo d 创建一篇新文章1$ hexo new \"My New Post\" 相关介绍: Writing 运行服务1$ hexo server 相关介绍: Server 生成静态文件12$ hexo generate可以简写为hexo g 相关介绍: Generating 部署到远程站点12$ hexo deploy可以简写为hexo d 相关介绍: Deployment","link":"/2017/11/13/hexo搭建部署及简单用法/"},{"title":"input属性accept可以限制的文件类型","text":"在上传文件的时候，需要限制指定的文件类型。accept表示可以上传文件类型，image表示图片，*表示所有支持的格式，IE对类型支持可能不太好。(IE10+) 123&lt;input type=&quot;file&quot; accept=&quot;image/*&quot; /&gt; eg.&lt;input type=&quot;file&quot; accept=&quot;application/pdf&quot; /&gt; accept可以指定如下信息： 扩展名 accept类型 类型描述 *.3gpp audio/3gpp, video/3gpp 3GPP Audio/Video *.ac3 audio/ac3 AC3 Audio *.asf allpication/vnd.ms-asf Advanced Streaming Format *.au audio/basic AU Audio *.css text/css Cascading Style Sheets *.csv text/csv Comma Separated Values *.doc application/msword MS Word Document *.dot application/msword MS Word Template *.dtd application/xml-dtd Document Type Definition *.dwg image/vnd.dwg AutoCAD Drawing Database *.dxf image/vnd.dxf AutoCAD Drawing Interchange Format *.gif image/gif Graphic Interchange Format *.htm text/html HyperText Markup Language *.html text/html HyperText Markup Language *.jp2 image/jp2 JPEG-2000 *.jpe image/jpeg JPEG *.jpeg image/jpeg JPEG *.jpg image/jpeg JPEG *.js text/javascript, application/javascript JavaScript *.json application/json JavaScript Object Notation *.mp2 audio/mpeg, video/mpeg MPEG Audio/Video Stream, Layer II *.mp3 audio/mpeg MPEG Audio Stream, Layer III *.mp4 audio/mp4, video/mp4 MPEG-4 Audio/Video *.mpeg video/mpeg MPEG Video Stream, Layer II *.mpg video/mpeg MPEG Video Stream, Layer II *.mpp application/vnd.ms-project MS Project Project *.ogg application/ogg, audio/ogg Ogg Vorbis *.pdf application/pdf Portable Document Format *.png image/png Portable Network Graphics *.pot application/vnd.ms-powerpoint MS PowerPoint Template *.pps application/vnd.ms-powerpoint MS PowerPoint Slideshow *.ppt application/vnd.ms-powerpoint MS PowerPoint Presentation *.rtf application/rtf, text/rtf Rich Text Format *.svf image/vnd.svf Simple Vector Format *.tif image/tiff Tagged Image Format File *.tiff image/tiff Tagged Image Format File *.txt text/plain Plain Text *.wdb application/vnd.ms-works MS Works Database *.wps application/vnd.ms-works Works Text Document *.xhtml application/xhtml+xml Extensible HyperText Markup Language *.xlc application/vnd.ms-excel MS Excel Chart *.xlm application/vnd.ms-excel MS Excel Macro *.xls application/vnd.ms-excel MS Excel Spreadsheet *.xlt application/vnd.ms-excel MS Excel Template *.xlw application/vnd.ms-excel MS Excel Workspace *.xml text/xml, application/xml Extensible Markup Language *.zip aplication/zip Compressed Archive 补充: 12345Vue的上传组件:https://github.com/lian-yue/vue-upload-component使用api文档:https://lian-yue.github.io/vue-upload-component/#/zh-cn/documents#入门开始-直接使用","link":"/2017/11/13/input类型为file时属性accept可以限制的文件类型/"},{"title":"git命令使用","text":"ps. 后续用到再补充 1.基本使用: 操作流程:初始化/拉取远程仓库 -&gt; 修改代码 -&gt; 添加到工作区 -&gt; 提交到本地仓库 -&gt; 推送远端 初始化本地仓库 1git init 文件修改后添加到工作区域 1git add &apos;文件名&apos; 或 git add . 文件从工作区域提交到版本库 1git commit -m &apos;提交信息&apos; 查看工作区和版本库的区别文件 1git diff 撤销工作区中的更新（只有添加到工作区才可以add） 1git checkout -- &apos;文件名&apos; 撤销在阶段(stage)的更新 12git statusgit reset HEAD &apos;文件名&apos; 撤销在版本库中的更新 123git loggit reset --hard &apos;commit的id&apos; 或者 git reset --hard HEAD^(一个^表示最近一次，^^表示最近两次提交) 恢复已撤销的版本库 12git refloggit reset --hard HEAD@{1}(需要恢复的版本) 查看git状态 1git status 查看提交日志 1git log 撤回相关操作 1git reset (根据提示操作) 2.分支操作 查看分支 12git branch -a(查看远程)git branch (查看本地) 创建分支 1git branch &apos;分支名&apos; 删除分支 1git branch -g &apos;分支名&apos; 删除远程分支 12git branch -r -d origin/&apos;分支名&apos;git push origin :分支名 切换分支 1git checkout &apos;分支名&apos; 合并分支 1git merge &apos;test&apos;（把test分支上的操作合并到当前分支） 推送远程分支 1git push origin &apos;分支名&apos;","link":"/2017/11/13/git命令使用/"},{"title":"ionic分享插件","text":"微博：https://github.com/iVanPan/cordova_weiboQQ：https://github.com/iVanPan/Cordova_QQ微信：https://github.com/vilic/cordova-plugin-wechat 各个开放平台申请appid QQ：腾讯开放平台 http://open.qq.com/ 微信：微信开放平台 https://open.weixin.qq.com/ 微博：新浪微博开放平台 http://open.weibo.com/ 在ios9系统下不添加白名单会出现分享跳转浏览器的情况，所以参考以下网址找到解决方案： ios9-对sharesdk的影响 http://wiki.mob.com/ios9-%E5%AF%B9sharesdk%E7%9A%84%E5%BD%B1%E5%93%8D%EF%BC%88%E9%80%82%E9%85%8Dios-9%E5%BF%85%E8%AF%BB%EF%BC%89/ http://www.111cn.net/wy/js-ajax/99614.htm","link":"/2016/06/02/ionic分享插件/"},{"title":"ionic缓存和数据存储","text":"1、ionic图片缓存 可采用方法: 1.图片转base64存本地缓存或数据库; 2.通过file、file transfer、device插件，把文件下载到app内。 3.通过imgcache.js使用html5文件存储到本地，可选择和angular-imgcache.js结合使用效果更佳。 注意打包到手机上需要仔细阅读cordova.md 2、ionic数据缓存 可采用方法: 1、通过html5离线存储如（localstorage、sessionstroage）等方式,websql目前还没测试过。 2、通过sqlLite插件存储到手机自带数据库。 可参考文档 PouchDBapi ionic 通过PouchDB ＋ SQLite来实现app的本地存储（Local Storage） How To Use PouchDB + SQLite For Local Storage In Your Ionic App","link":"/2016/06/02/ionic缓存和数据存储/"},{"title":"ionic自动更新(ios和android)","text":"首先，感谢分享本篇技术文档的作者， 以下文档整理自https://www.bestguy.net/2015/11/05/关于ionic的版本升级，只升级www部分 背景： ionic官方有介绍如何更新、回滚等，但deploy服务器在国外,故不翻墙大多数时候是无法下载的，故需要自己搭建本地服务器。 参考官方文档：http://docs.ionic.io/docs/deploy-overview ionic自动更新： 讲下原理，ionic内部也是cordova的，在android平台下，他的webview默认加载assert下边的www里边的内容，我们更新的时候，通过native android 把更新包下载下来，解压到 data/data/xx.xx/www里边，然后用cordova的 webView.loadUrlIntoView 直接把新的版本载入，升级完成。 操作步骤： 1、这两个文件下载好，放到www/js 里边，在index.html 的之前，引入这两个js 这个是deploy依赖的ionic核心组件(修改自官方版) https://raw.githubusercontent.com/lngjy/ionic-service-core-private/master/ionic-core.js deploy的组件(修改自官方版) https://raw.githubusercontent.com/lngjy/ionic-service-deploy-private/master/ionic-deploy.js 2、安装deploy插件 deploy插件（修改自官方版） cordova plugin add https://github.com/lngjy/ionic-plugin-deploy-private.git 3、app.js 部分： angular.module 里边加入 ‘ionic.service.deploy’,’ionic.service.core’ 这两个依赖.config 部分 ， 注入 $ionicAppProvider 12345678$ionicAppProvider.identify({//这个应用的标识app_id: &apos;xc02&apos;,//生产环境的域名domain: &apos;http://www.bestguy.net&apos;,//生产环境channel_tag: &apos;prod&apos;}); 4、检查更新： 检测升级实际上是post数据到 http://www.bestguy.net/update/check/xc02（根据自身服务器地址情况修改） 上边，json 格式如下 123456789//device_app_version：这个是app自己的version，在config.xml 里边配置;//device_deploy_uuid：这个是升级的uuid，理论上和你的最新版本保持一致，或者你自己定这个版本，具体怎么回事，下边会说;//device_platform：这个android和ios channel_tag 这个是标志是哪个环境用的。{&quot;device_app_version&quot;:1.0,&quot;device_deploy_uuid&quot;:1.0,&quot;device_platform&quot;:&quot;android&quot;,&quot;channel_tag&quot;:&quot;production&quot;} 好了。 这个post到服务器，服务器需要处理这个数据， 如果从来没更新过， 那么device_deploy_uuid这个会传NO_DEPLOY_AVAILABLE过去，表示客户端从来没升级过，这个时候，需要判断device_app_version这个版本。 好了，我们返回构造数据 123456789101112//compatible_binary 和 update_available 都是true 的时候，就会下载更新。//如果安装成功，下次就会给服务器传这个uuid的版本，所以，一定要自己搞明白对应关系，推荐和版本一致。//url 是下载包的位置，相对路径哦，相对于你服务器路径如：http://baidu.com/test/www.zip{&apos;compatible_binary&apos;: true,&apos;update_available&apos;: true,&apos;update&apos;: { &apos;uuid&apos;: &apos;1.0.3&apos;, &apos;url&apos;: &apos;/test/www.zip&apos; }} 写好了代码之后，压缩www目录下的所有文件（ps:不要压缩www,是www里面的所有文件) 1234ionic platform add androidionic build androidcd platforms/android/assets/wwwzip -r www.zip * 5.添加升级检测部分代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125.factory(&quot;versionUpdateService&quot;, function ( $ionicPopup, $ionicDeploy, $timeout, $ionicLoading) { var version ; /** * 获得version */ function getAppVersion() { $ionicDeploy.info().then(function (data) { var binaryVersion = data.binary_version; var deployUuid = data.deploy_uuid; version = deployUuid != &apos;NO_DEPLOY_AVAILABLE&apos; ? deployUuid : binaryVersion; }); } /** * 检查更新 */ function checkUpdate() { $ionicLoading.show({ template: &apos;正在检查更新...&apos;, animation: &apos;fade-in&apos;, showBackdrop: true, duration: 3000, showDelay: 0 }); $ionicDeploy.check().then(function (hasUpdate) { if (hasUpdate) { showUpdateConfirm(); } else { $ionicLoading.show({ template: &apos;恭喜你,你的版本已经是最新!&apos;, animation: &apos;fade-in&apos;, showBackdrop: true, duration: 2000, showDelay: 0 }); } }, function (err) { $ionicLoading.show({ template: &apos;更新失败,请检查您的网络配置!&apos; + err, animation: &apos;fade-in&apos;, showBackdrop: true, duration: 2000, showDelay: 0 }); }); } function init() { } function showUpdateConfirm() { $ionicLoading.hide(); var confirmPopup = $ionicPopup.confirm({ title: &apos;版本升级&apos;, template: &quot;有新的版本了,是否要升级?&quot;, cancelText: &apos;取消&apos;, okText: &apos;升级&apos; }); confirmPopup.then(function (res) { $ionicLoading.show({ template: &apos;正在更新...&apos;, animation: &apos;fade-in&apos;, showBackdrop: true, //duration: 2000, showDelay: 0 }); if (res) { $ionicDeploy.update().then(function (res) { $ionicLoading.hide(); $ionicLoading.show({ template: &apos;更新成功!&apos;, animation: &apos;fade-in&apos;, showBackdrop: true, duration: 2000, showDelay: 0 }); }, function (err) { $ionicLoading.hide(); $ionicLoading.show({ template: &apos;更新失败!&apos; + err, animation: &apos;fade-in&apos;, showBackdrop: true, duration: 2000, showDelay: 0 }); }, function (prog) { $ionicLoading.show({ template: &quot;已经下载：&quot; + prog + &quot;%&quot; }); if (downloadProgress &gt; 99) { $ionicLoading.hide(); } }); } else { $ionicLoading.hide(); } }); }; return { init: function () { getAppVersion(); }, getVersion: function () { return version; }, checkUpdate: function () { checkUpdate(); }, update: function () { update(); } }}) 补充：2017-12-04另外几个cordova更新插件： cordova-hot-code-push-plugin cordova-code-push 发现原作者博客打不开，补上另一个博主链接 http://www.scaperow.com/133","link":"/2016/06/02/ionic自动更新-ios和android/"},{"title":"ionic调用原生页面切换动画","text":"使用ionic一段时间，发现在ionic内使用$state.go()这个方法切换路由，会出现页面切换方向出错的问题。所以尝试找资料，找了好久发现无果… 后来偶尔看到ionic-native-transitions 这个插件，本地尝试了下，发现效果不错，还可以禁用ionic自带的页面切换动画，看简介貌似android只支持左右切换，上下和翻转不支持（没测试过）。 下面跟着github主页介绍一步一步走： 1.首先下载js插件到本地,我采用bower的安装方式 bower install shprink/ionic-native-transitions 然后插入 1&lt;script src=&quot;./PathToBowerLib/dist/ionic-native-transitions.min.js&quot;&gt;&lt;/script&gt; 2.下载cordova插件 12345# Using Cordovacordova plugin add https://github.com/Telerik-Verified-Plugins/NativePageTransitions#0.6.2# Using Ionic CLIionic plugin add https://github.com/Telerik-Verified-Plugins/NativePageTransitions#0.6.2 在ios9系统可能会出现闪烁，防止这种情况，接着添加插件 12345# Using Cordovacordova plugin add cordova-plugin-wkwebview# Using Ionic CLIionic plugin add cordova-plugin-wkwebview 如果android添加了的Crosswalk版本大于1.3 ,需要在config.xml内添加一行配置。 1&lt;preference name=&quot;CrosswalkAnimatable&quot; value=&quot;true&quot; /&gt; 3.在ionic内配置切换动画 123angular.module(&apos;yourApp&apos;, [ &apos;ionic-native-transitions&apos;]); 设置默认动画 123456.config(function($ionicNativeTransitionsProvider){ $ionicNativeTransitionsProvider.setDefaultTransition({ type: &apos;slide&apos;, direction: &apos;left&apos; });}); 设置默认返回动画 123456.config(function($ionicNativeTransitionsProvider){ $ionicNativeTransitionsProvider.setDefaultBackTransition({ type: &apos;slide&apos;, direction: &apos;right&apos; });}); 开启native动画，关闭ionic动画 1$ionicNativeTransitions.enable(true); 4.使用方法 123456789101112131415设置动画.state(&apos;home&apos;, { url: &apos;/home&apos;, nativeTransitions: { &quot;type&quot;: &quot;flip&quot;, &quot;direction&quot;: &quot;up&quot; } templateUrl: &quot;templates/home.html&quot;})或不设置动画.state(&apos;home&apos;, { url: &apos;/home&apos;, nativeTransitions: null, templateUrl: &quot;templates/home.html&quot;}) 使用 指令默认使用返回页面切换动画 更多api可参考 https://github.com/shprink/ionic-native-transitions","link":"/2016/06/02/ionic调用原生转场动画/"},{"title":"js数组排序","text":"转载自:http://www.cnblogs.com/longze/archive/2012/11/27/2791230.html sort()对数组排序，不开辟新的内存，对原有数组元素进行调换 1、简单数组简单排序 123456var arrSimple=new Array(1,8,7,6);arrSimple.sort();document.writeln(arrSimple.join()); 2、简单数组自定义排序 123456var arrSimple2=new Array(1,8,7,6); arrSimple2.sort(function(a,b){ return b-a}); document.writeln(arrSimple2.join()); 解释：a,b表示数组中的任意两个元素， 若return &gt; 0 b前a后； reutrn &lt; 0 a前b后； a=b时存在浏览器兼容 简化一下：a-b输出从小到大排序，b-a输出从大到小排序。 3、简单对象List自定义属性排序 123456789101112131415 var objectList = new Array(); function Persion(name,age){ this.name=name; this.age=age; } objectList.push(new Persion('jack',20)); objectList.push(new Persion('tony',25)); objectList.push(new Persion('stone',26)); objectList.push(new Persion('mandy',23)); //按年龄从小到大排序 objectList.sort( function(a,b){ return a.age-b.age } ); for(var i=0;i&lt;objectList.length;i++){ document.writeln('&lt;br /&gt;age:'+objectList[i].age+' name:'+objectList[i].name);} 4、简单对象List对可编辑属性的排序 1234567891011121314151617181920212223242526272829var objectList2 = new Array();function WorkMate(name,age){ this.name=name; var _age=age; this.age=function(){ if(!arguments) { _age=arguments[0]; } else { return _age; } }objectList2.push(new WorkMate('jack',20));objectList2.push(new WorkMate('tony',25));objectList2.push(new WorkMate('stone',26));objectList2.push(new WorkMate('mandy',23));//按年龄从小到大排序objectList2.sort( function(a,b){ return a.age()-b.age(); } );for(var i=0;i&lt;objectList2.length;i++){ document.writeln('&lt;br /&gt;age:'+objectList2[i].age()+' name:'+objectList2[i].name);}","link":"/2016/04/30/js数组排序/"},{"title":"markdown基本语法","text":"h1~h5的级别12# 这是 H1### 这是 H3 p标签1默认语句就是p标签 区块标签 这是区块 1&gt; 加内容 分割线 无序列表 列表1 列表2 列表3 1- 无序列表1 有序列表 有序列表1 有序列表2 有序列表3 11.有序列表 文本 这是一段文本上部分 这是一段文本下部分 这是第二段文本 1234567- 这是一段文本上部分 这是一段文本下部分- 这是第二段文本文本段落后加tab可以切换 em标签这是em 1*这是em* strong标签这是strong 1**这是strong** 表格 标题1 标题2 内容1 内容2 内容3 内容4 1234| 标题1 | 标题2 ||-------|-------|| 内容1 | 内容2 || 内容3 | 内容4 | js代码1234var a;function test(){ return a;} json代码12345\"rules\": [{ \"file_type\": \"Markdown\", \"pips\": [ ], \"folder_viewer\": \"Finder\", 添加链接地址测试链接 1[测试链接](http:www.baidu.com \"Title Here\")","link":"/2016/12/13/markdown基本语法/"},{"title":"nestjs学习资料","text":"用于构建高效且可伸缩的服务端应用程序的渐进式 Node.js 框架。完美支持 Typescript、面向 AOP 编程、支持 typeorm、Node.js 版的 spring、构建微服务应用。 相比koa、express这些基础框架，然后自己拼积木的方式（寻找一堆插件来实现想要的功能），且由于太灵活，容易造成代码不太方便管理、维护和写出高质量代码。 吸引我尝试去使用nestjs是因为了解到它自身的的功能就非常丰富，去中心化的路由、中间件、异常处理、管道、守卫等，还介绍了如何搭建微服务。 nesejs的相关资料： nestjs中文API、nestjs英文API it帮帮忙-边走边学nestjs（Day1-Day30） it帮帮忙-30Day初探nestjs（Day1-Day30） awesome-nestjs Easy-Post 名词解释 DTO（Data transfer object）: 数据传输对象 额外知识： 装饰器 精读nestjs nunjucks模板引擎 学写cnode TypeScript文档 Rxjs文档 相关文章: RxJS Observables vs Promise 之简单对比","link":"/2019/05/30/nestjs学习资料/"},{"title":"ionic集成极光推送插件","text":"相关链接： 极光推送官网 极光推送github主页 相关api 准备工作 1.添加极光推送插件和device插件,API_KEY为极光推送官网申请。 cordova plugin add https://github.com/jpush/jpush-phonegap-plugin.git –variable API_KEY=your_jpush_appkey cordova plugin add https://github.com/apache/cordova-plugin-device.git 2.拷贝plugin目录的极光推送插件到项目根目录下，并修改以及删除plugin目录下的极光推送插件。 修改根目录极光推送插件(cn.jpush.phonegap.JPushPlugin)文件夹下src/android/JPushPlugin.java，大概第十行，修改import youpackge.R为 import cn.kigsir.jpushdemo.R 3.添加platform 然后添加根目录下的修改好的极光推送插件 cordova plugin add cn.jpush.phonegap.JPushPlugin 4.修改ionic目录app.js,启用极光推送。 添加到$ionicPlatform.ready(function() {})方法内 123456789101112131415161718192021$ionicPlatform.ready(function() {document.addEventListener(&quot;deviceready&quot;, function () { //启动极光推送服务 window.plugins.jPushPlugin.init(); //调试模式 window.plugins.jPushPlugin.setDebugMode(true); //接收消息并跳转相应的页面 window.plugins.jPushPlugin.openNotificationInAndroidCallback = function (data) { var obj = JSON.parse(data); console.log(obj); var id = obj.extras[&apos;cn.jpush.android.EXTRA&apos;].id; // $state.go(&apos;appealDetail&apos;, {appealid: id}); alert(id); } alert(&apos;ready...&apos;); })}) 5.前往极光推送官网配置推送消息，如果不出错，手机应该会提示有推送消息了。 ps.但同时会提示统计缺少统计代码 不让提示的方法如下： 找到platforms/androdi/src/(你的app包名)/CordovaApp.java或activity.java文件，添加如下代码,并在public class CordovaApp extends CordovaActivity上面导入接口代码，import cn.jpush.android.api.JPushInterface; 12345678910@Overrideprotected void onResume() { super.onResume(); JPushInterface.onResume(this);}@Overrideprotected void onPause() { super.onPause(); JPushInterface.onPause(this);} 接着运行ionic run android –deivce，再去添加推送消息就不会出现缺少统计代码的提示信息了。","link":"/2016/06/02/ionic集成极光推送插件/"},{"title":"nestjs框架学习记录Day1","text":"添加nunjucks模板引擎1、添加 nunjucks npm 包 2、根目录新建views文件夹存放模板（和src同目录），并新建index.njk 3、main.ts内 12345678910111213141516171819202122232425262728293031323334import { NestFactory } from &apos;@nestjs/core&apos;;import { AppModule } from &apos;./app.module&apos;;import { NestExpressApplication } from &apos;@nestjs/platform-express&apos;;import { join } from &apos;path&apos;import * as nunjucks from &apos;nunjucks&apos;async function bootstrap() { const app = await NestFactory.create&lt;NestExpressApplication&gt;(AppModule); // 获取根目录nest-cnode const rootDir = join(__dirname, &apos;..&apos;); const environment = nunjucks.configure( [ join(rootDir, &quot;views&quot;) ], { autoescape: true, throwOnUndefined: false, trimBlocks: true, lstripBlocks: false, watch: true, noCache: process.env.NODE_ENV === &quot;local&quot; ? true : false, express: app } ); app.engine(&quot;njk&quot;, environment.render); app.setViewEngine(&quot;njk&quot;); app.set(&quot;view cache&quot;, true); await app.listen(3000);}bootstrap(); 4、修改src/app.controller.ts 123456789101112131415161718192021222324252627import { Controller, Get, Post,Render } from &apos;@nestjs/common&apos;;import { AppService } from &apos;./app.service&apos;;@Controller()export class AppController { constructor(private readonly appService: AppService) {} // @Get() // getHello(): string { // return this.appService.getHello(); // } @Get() @Render(&apos;index&apos;) root() { return { message: &apos;Hello world!&apos; }; } @Post() addHello(){ return { test: true } }} 5、index.njk内修改部分njk的语法，刷新浏览器则可看到效果","link":"/2019/05/30/nestjs框架学习记录Day1/"},{"title":"nestjs框架学习记录Day2","text":"控制器、服务、模块(mvc)尝试创建路由，并发送GET、POST请求 在src目录，新建users模块、控制器、服务（nestjs-cli会自动帮我们把模块注入到app.module.ts） 123456789101112// 创建users模块nest g mo users // 创建users控制器nest g co users// 创建users服务nest g s users// 创建user接口（接口不会自动创建文件夹，需要切换到目录自己创建文件夹）cd users &amp; mkdir interfacesnest g - user 2.","link":"/2019/05/31/nestjs框架学习记录Day2/"},{"title":"react-native学习中遇到的问题","text":"Xcode7打包遇到问题：1、如果打包后APP不能访问远程服务器，则添加以下属性 原因其实这是苹果加大安全的管控，将以往HTTP协议强制改为HTTPS协议 12NSAppTransportSecurity 类型 Dictionary Dictionary添加 NSAllowsArbitraryLoads 类型 Boolean ,值设为 YES 2、提示CDVViewController.h file not found. 123Build Settings 选项搜索 Header Search ,Header Search Paths添加&quot;$(OBJROOT)/UninstalledProducts/$(PLATFORM_NAME)/include&quot; 3、提示Undefined symbols for architecture arm64等错误. 123Build Settings 选项搜索 dead, Dead Code Stripping(去除死代码选项)改为No 4、Xcoede provisioning prifles需要手动删除 12com+shift+g，输入以下路径~/Library/MobileDevice/Provisioning Profiles","link":"/2017/06/02/react-native学习中遇到的问题/"},{"title":"redux学习笔记","text":"要点从起初的flux到redux到mobx，react衍生的技术栈范围越来越广，要学习的知识也越来越多。新人接触redux可能很难理解一系列，react redux redux-thunk/redux-saga immutable等。觉着react全家桶学习很累？没关系，可以了解下 dva 这个基于redux、redux-saga开发的简单易用的react框架。 回到正题，redux 应用中所有的 state 都以一个对象树的形式储存在一个单一的 store 中。 惟一改变 state 的办法是触发 action，一个描述发生什么的对象。 为了描述 action 如何改变 state 树，你需要编写 reducers。redux api中文文档参考 redux处理异步action可采用redux-thunk或redux-saga 认识的新名词： reactotron（测试工具）、ignite","link":"/2017/03/31/redux学习笔记/"},{"title":"nestjs框架学习记录Day3","text":"","link":"/2019/06/01/nestjs框架学习记录Day3/"},{"title":"nestjs框架学习记录Day4","text":"","link":"/2019/06/02/nestjs框架学习记录Day4/"},{"title":"vue开发中遇到问题","text":"1、vue内使用vue-cli默认模板build/dev-server.js开发模拟接口数据 12345678910111213141516模拟接口数据添加在app下面var app = express()....// ------ 自定义API服务 -------var comicGradeData = require(&apos;../mockData/comic_grade.json&apos;)var apiRoutes = express.Router()apiRoutes.post(&apos;/comic_grade&apos;, function (req, res) { res.json({ code: 200, message: &quot;漫画分级&quot;, data: comicGradeData })})访问地址为： /api/addressapp.use(&apos;/data&apos;, apiRoutes)// ---- 自定义API服务-end ----- 注意：默认貌似webpack加载json会报错，可以使用webpack提供的json-loader加载 使用方法： 123456789101112131415161718npm install --save-dev json-loaderwebpack.config.js内添加下面配置：module.exports = { module: { loaders: [ { test: /\\.json$/, loader: &apos;json-loader&apos; } ] }}const json = require(&apos;./file.json&apos;)或import json from &quot;./file.json&quot;都可以 参考：http://www.css88.com/doc/webpack/loaders/json-loader/ 2、全局加载第三方库可以使用如下方法 eg. 第三方库moment： 1234567import moment from &apos;moment&apos;Object.definePrototype(Vue.prototype, &apos;$moment&apos;, { value: moment })或直接添加到Vue的原型上Vue.prototype.$moment = moment; ps. Object.define的方式创建的属性是只读的，如果有人重写this.$moment=’….’会提示TypeError: Cannot assign to read only property \b也可以使用插件的形式: 123// script.jsimport MyLibraryPlugin from &apos;my-library-plugin&apos;;Vue.use(MyLibraryPlugin); 以axios.js为例子，插件必须公开一个 install 方法，并且将 Vue 构造函数作为第一个参数： 1234567// axios.jsimport axios from &apos;axios&apos;;export default { install: function(Vue,) { Object.defineProperty(Vue.prototype, &apos;$http&apos;, { value: axios }); }} 然后就可以使用vue.use(plugin)的方法添加插件到全局 12345678// entry.jsimport AxiosPlugin from &apos;./axios.js&apos;;Vue.use(AxiosPlugin);new Vue({ created() { console.log(this.$http ? &apos;Axios works!&apos; : &apos;Uh oh..&apos;); }}) 参考自：http://www.css88.com/archives/7939 3、注册全局filter 12345678import * as filters from &apos;@/common/filters/filter&apos;// 遍历并注册filterObject.keys(filters).forEach( key =&gt; { Vue.filter(key, filters[key]) }) 4、v-html内使用filter可采用: 1v-html=&quot;$options.filters.upDown(item)&quot;","link":"/2017/12/14/vue开发中遇到问题/"},{"title":"工具插件","text":"angular.js常用插件: 圆形进度条 使用心得:方便定制、简易使用、效果不错 https://github.com/crisbeto/angular-svg-round-progressbar 手势插件 使用心得:便于在跨平台App使用、修改 https://github.com/shenmingxuanyi/Angular-GestureLock 其它插件: 绘画drawingboard.js: 使用心得：功能丰富 画布绘画插件 https://github.com/Leimi/drawingboard.js","link":"/2016/04/30/工具插件/"},{"title":"sketch导出iconfont识别的svg","text":"今天看到UI给的图少一个icon，于是自己折腾sketch做了一个，发现导入iconfont的时候一直上传失败！百度了下找到对应解决办法，详细操作步骤见下图： 操作步骤如下： 另附上 sketch-iconfont这个插件的相关用法： github地址：sketch-iconfont 相关用法: https://sspai.com/post/40502","link":"/2018/06/26/sketch导出iconfont识别的svg/"},{"title":"nestjs框架学习记录Day5","text":"","link":"/2019/06/03/nestjs框架学习记录Day5/"}],"tags":[{"name":"angular","slug":"angular","link":"/tags/angular/"},{"name":"cordova","slug":"cordova","link":"/tags/cordova/"},{"name":"nodejs","slug":"nodejs","link":"/tags/nodejs/"},{"name":"express","slug":"express","link":"/tags/express/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"html","slug":"html","link":"/tags/html/"},{"name":"git","slug":"git","link":"/tags/git/"},{"name":"ionic","slug":"ionic","link":"/tags/ionic/"},{"name":"javascript","slug":"javascript","link":"/tags/javascript/"},{"name":"markdown","slug":"markdown","link":"/tags/markdown/"},{"name":"nestjs","slug":"nestjs","link":"/tags/nestjs/"},{"name":"node.js","slug":"node-js","link":"/tags/node-js/"},{"name":"react-native","slug":"react-native","link":"/tags/react-native/"},{"name":"react","slug":"react","link":"/tags/react/"},{"name":"redux","slug":"redux","link":"/tags/redux/"},{"name":"vue","slug":"vue","link":"/tags/vue/"},{"name":"工具插件","slug":"工具插件","link":"/tags/工具插件/"},{"name":"sketch","slug":"sketch","link":"/tags/sketch/"}],"categories":[{"name":"web","slug":"web","link":"/categories/web/"},{"name":"跨平台","slug":"跨平台","link":"/categories/跨平台/"},{"name":"服务端","slug":"服务端","link":"/categories/服务端/"},{"name":"工具","slug":"工具","link":"/categories/工具/"},{"name":"nestjs","slug":"服务端/nestjs","link":"/categories/服务端/nestjs/"}]}